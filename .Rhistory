system.time({ opt_split(f,AMSE,M = 10) })
system.time({ opt_split_test(f = f, AMSE = AMSE, M = 10) })
opt_split=function(f,AMSE, M=10)
{
nx=dim(f)[2] ### number of grid
if(nx<2*M+1){
opt_ix=NA
AM1=NA
AM2=NA
}
else
{
MG=zeros(nx-1,1) #the improvement by splitting
AM1=zeros(nx-1,1)
AM2=zeros(nx-1,1)
for (i in 1:(nx-1))
{
R=split(f,i)
MG[i]=AMSE-(R[1]*i/nx+R[2]*(nx-i)/nx)
AM1[i]=R[1]
AM2[i]=R[2]
# if(G>MG){
#   MG=G
#   ix=i
#   AM1=R[1]
#   AM2=R[2]
#   }
}
MG_new=MG[(M+1):(nx-M-1)]
if (all(MG_new==0)){
opt_ix= NA
AM1=NA
AM2=NA
}
else
{
#sort(MG_new, decreasing=TRUE)
#ix=order(MG_new, decreasing=TRUE) +M
ix = which.max(MG_new) + M
opt_ix= ix[1]
# print("printing the opt_split returns")
# print(opt_ix)
}
}
opt_split=list(opt_ix,AM1[opt_ix],AM2[opt_ix])   # AM1 the total mean square error on the left
# AM2the total mean square error on the right
opt_split
}
opt_split(f,AMSE, M=10)
opt_split_test(f,AMSE,M = 10)
system.time({ opt_split(f,AMSE,M = 10) })
system.time({ opt_split_test(f = f, AMSE = AMSE, M = 10) })
system.time({ opt_split(f,AMSE,M = 10) })
system.time({ opt_split_test(f = f, AMSE = AMSE, M = 10) })
system.time({ opt_split(f,AMSE,M = 10) })
opt_split_test=function(f,AMSE, M=10)
{
nx=dim(f)[2] ### number of grid
if(nx<2*M+1){
opt_ix=NA
AM1=NA
AM2=NA
}
else
{
AM <- lapply(1:(nx-1),split,f=f) # calculate the left and right AMSE for each discritization
AM1 = unlist(lapply(AM, `[[`, 1))
AM2 = unlist(lapply(AM, `[[`, 2))
I = 1:(nx-1)
MG=AMSE-(AM1*(I/nx)+AM2*((nx-I)/nx))
MG_new=MG[(M+1):(nx-M-1)]
if (all(MG_new==0)){
opt_ix= NA
AM1=NA
AM2=NA
}
else
{
#ix=order(MG_new, decreasing=TRUE) +M
ix = which.max(MG_new) + M
opt_ix= ix[1]
# print("printing the opt_split returns")
# print(opt_ix)
}
}
opt_split=list(opt_ix,AM1[opt_ix],AM2[opt_ix])   # AM1 the total mean square error on the left
# AM2the total mean square error on the right
opt_split
}
system.time({ opt_split(f,AMSE,M = 10) })
system.time({ opt_split_test(f = f, AMSE = AMSE, M = 10) })
system.time({ opt_split(f,AMSE,M = 10) })
system.time({ opt_split_test(f = f, AMSE = AMSE, M = 10) })
N=30#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
knots1=c(0,nx)
NKN_1=add_knots(f,knots1,N-1,M)
add_split=function(f,LE,RE,AMSE,AMSE1,AMSE2,splits)
{
#The programs add a new knot by adding its endpoints to LE and RE and revising AMSE, AMSE1, and AMSE2
#The optimal potential splits are now given in 'splits' togeter with 'AMSE1' and 'AMSE2'
K=length(AMSE) #The common size of all vectors it will increase by one at the end of the function
#Next, one of the splits (optimal) becomes a new knot (and thus one endpoint is added to LE and RE each).
nLE=LE  #new endpoints they will increase by one in the next part
nRE=RE  #of the code
NAMSE=AMSE #New AMSE corresponding to 'nknots'
#Compute the drops in the average mean square errors, order them, and get ranks.
DAMSE=AMSE-(splits-LE)/(RE-LE)*AMSE1-(RE-splits)/(RE-LE)*AMSE2
print('printing the drop mean square error for all potential knots')
print(DAMSE)
if(all(is.na(DAMSE))){
warning('we found k knot and there are no more possibility to reduce. decrease M or L to find more knots')
quit()
}
else{
pos=which.max(DAMSE) #Location of the optimal split (also left hand side endpoint of the corresponding knot-interval)
nk=splits[pos] #The split leading to the largest gain, this becomes a new knot.
nLE=append(nLE,nk,after=pos) #Now we have K+1 knots, so one more left hand side endpoint
nRE=append(nRE,nk,after=(pos-1)) # and one more right hand side endpoint
#After getting a new knot we need change also AMSE
NAMSE[pos]=AMSE1[pos]
NAMSE=append(NAMSE,AMSE2[pos],after=pos) #Now we have K AMSE's
#Now it is time to update splits and AMSE1 and AMSE2
nsplits=splits #New splits corresponding to 'nknots' (to be revised below)
NAMSE1=AMSE1 #New AMSE1 corresponding to 'nknots' (to be revised below)
NAMSE2=AMSE2 #New AMSE1 corresponding to 'nknots' (to be revised below)
#Compute the optimal splits on the left and right intervals around the new knot
ff1=f[,(nLE[pos]+1):nRE[pos]]  #Part of the data below the new knot, the new knot is at LE[pos+1]=RE[pos]
newsp=opt_split(ff1,NAMSE[pos])
nsplits[pos]=nLE[pos]+newsp[[1]]       #Computing the split, AMSE1, and AMSE2 for the split below the new knot
NAMSE1[pos]=newsp[[2]]
NAMSE2[pos]=newsp[[3]]
ff2=f[,(nLE[pos+1]+1):nRE[pos+1]] #Computing the split, AMSE1, and AMSE2 for the split above the new knot
newsp=opt_split(ff2,NAMSE[pos+1])
nsplits=append(nsplits,nLE[pos+1]+newsp[[1]],after=pos) #Computing the split, AMSE1, and AMSE2 for the split above the new knot
NAMSE1=append(NAMSE1,newsp[[2]],after=pos)
NAMSE2=append(NAMSE2,newsp[[3]],after=pos)
opt_knots=list(NLE=nLE,NRE=nRE,nsplits=nsplits,NAMSE=NAMSE,NAMSE1=NAMSE1,NAMSE2=NAMSE2,locsp=pos)
}
return(opt_knots)
}
NKN_1=add_knots(f,knots1,N-1,M)
add_split=function(f,LE,RE,AMSE,AMSE1,AMSE2,splits)
{
#The programs add a new knot by adding its endpoints to LE and RE and revising AMSE, AMSE1, and AMSE2
#The optimal potential splits are now given in 'splits' togeter with 'AMSE1' and 'AMSE2'
K=length(AMSE) #The common size of all vectors it will increase by one at the end of the function
#Next, one of the splits (optimal) becomes a new knot (and thus one endpoint is added to LE and RE each).
nLE=LE  #new endpoints they will increase by one in the next part
nRE=RE  #of the code
NAMSE=AMSE #New AMSE corresponding to 'nknots'
#Compute the drops in the average mean square errors, order them, and get ranks.
DAMSE=AMSE-(splits-LE)/(RE-LE)*AMSE1-(RE-splits)/(RE-LE)*AMSE2
print('printing the drop mean square error for all potential knots')
print(DAMSE)
if(all(is.na(DAMSE))){
warning('we found k knot and there are no more possibility to reduce. decrease M or L to find more knots')
quit()
}
else{
pos=which.max(DAMSE) #Location of the optimal split (also left hand side endpoint of the corresponding knot-interval)
nk=splits[pos] #The split leading to the largest gain, this becomes a new knot.
print("print the new split")
print(nk)
nLE=append(nLE,nk,after=pos) #Now we have K+1 knots, so one more left hand side endpoint
nRE=append(nRE,nk,after=(pos-1)) # and one more right hand side endpoint
#After getting a new knot we need change also AMSE
NAMSE[pos]=AMSE1[pos]
NAMSE=append(NAMSE,AMSE2[pos],after=pos) #Now we have K AMSE's
#Now it is time to update splits and AMSE1 and AMSE2
nsplits=splits #New splits corresponding to 'nknots' (to be revised below)
NAMSE1=AMSE1 #New AMSE1 corresponding to 'nknots' (to be revised below)
NAMSE2=AMSE2 #New AMSE1 corresponding to 'nknots' (to be revised below)
#Compute the optimal splits on the left and right intervals around the new knot
ff1=f[,(nLE[pos]+1):nRE[pos]]  #Part of the data below the new knot, the new knot is at LE[pos+1]=RE[pos]
newsp=opt_split(ff1,NAMSE[pos])
nsplits[pos]=nLE[pos]+newsp[[1]]       #Computing the split, AMSE1, and AMSE2 for the split below the new knot
NAMSE1[pos]=newsp[[2]]
NAMSE2[pos]=newsp[[3]]
ff2=f[,(nLE[pos+1]+1):nRE[pos+1]] #Computing the split, AMSE1, and AMSE2 for the split above the new knot
newsp=opt_split(ff2,NAMSE[pos+1])
nsplits=append(nsplits,nLE[pos+1]+newsp[[1]],after=pos) #Computing the split, AMSE1, and AMSE2 for the split above the new knot
NAMSE1=append(NAMSE1,newsp[[2]],after=pos)
NAMSE2=append(NAMSE2,newsp[[3]],after=pos)
opt_knots=list(NLE=nLE,NRE=nRE,nsplits=nsplits,NAMSE=NAMSE,NAMSE1=NAMSE1,NAMSE2=NAMSE2,locsp=pos)
}
return(opt_knots)
}
add_split=function(f,LE,RE,AMSE,AMSE1,AMSE2,splits)
{
#The programs add a new knot by adding its endpoints to LE and RE and revising AMSE, AMSE1, and AMSE2
#The optimal potential splits are now given in 'splits' togeter with 'AMSE1' and 'AMSE2'
K=length(AMSE) #The common size of all vectors it will increase by one at the end of the function
#Next, one of the splits (optimal) becomes a new knot (and thus one endpoint is added to LE and RE each).
nLE=LE  #new endpoints they will increase by one in the next part
nRE=RE  #of the code
NAMSE=AMSE #New AMSE corresponding to 'nknots'
#Compute the drops in the average mean square errors, order them, and get ranks.
DAMSE=AMSE-(splits-LE)/(RE-LE)*AMSE1-(RE-splits)/(RE-LE)*AMSE2
#print('printing the drop mean square error for all potential knots')
#print(DAMSE)
if(all(is.na(DAMSE))){
warning('we found k knot and there are no more possibility to reduce. decrease M or L to find more knots')
quit()
}
else{
pos=which.max(DAMSE) #Location of the optimal split (also left hand side endpoint of the corresponding knot-interval)
nk=splits[pos] #The split leading to the largest gain, this becomes a new knot.
print("print the new split")
print(nk)
nLE=append(nLE,nk,after=pos) #Now we have K+1 knots, so one more left hand side endpoint
nRE=append(nRE,nk,after=(pos-1)) # and one more right hand side endpoint
#After getting a new knot we need change also AMSE
NAMSE[pos]=AMSE1[pos]
NAMSE=append(NAMSE,AMSE2[pos],after=pos) #Now we have K AMSE's
#Now it is time to update splits and AMSE1 and AMSE2
nsplits=splits #New splits corresponding to 'nknots' (to be revised below)
NAMSE1=AMSE1 #New AMSE1 corresponding to 'nknots' (to be revised below)
NAMSE2=AMSE2 #New AMSE1 corresponding to 'nknots' (to be revised below)
#Compute the optimal splits on the left and right intervals around the new knot
ff1=f[,(nLE[pos]+1):nRE[pos]]  #Part of the data below the new knot, the new knot is at LE[pos+1]=RE[pos]
newsp=opt_split(ff1,NAMSE[pos])
nsplits[pos]=nLE[pos]+newsp[[1]]       #Computing the split, AMSE1, and AMSE2 for the split below the new knot
NAMSE1[pos]=newsp[[2]]
NAMSE2[pos]=newsp[[3]]
ff2=f[,(nLE[pos+1]+1):nRE[pos+1]] #Computing the split, AMSE1, and AMSE2 for the split above the new knot
newsp=opt_split(ff2,NAMSE[pos+1])
nsplits=append(nsplits,nLE[pos+1]+newsp[[1]],after=pos) #Computing the split, AMSE1, and AMSE2 for the split above the new knot
NAMSE1=append(NAMSE1,newsp[[2]],after=pos)
NAMSE2=append(NAMSE2,newsp[[3]],after=pos)
opt_knots=list(NLE=nLE,NRE=nRE,nsplits=nsplits,NAMSE=NAMSE,NAMSE1=NAMSE1,NAMSE2=NAMSE2,locsp=pos)
}
return(opt_knots)
}
NKN_1=add_knots(f,knots1,N-1,M)
NKN_1$Fknots
add_split=function(f,LE,RE,AMSE,AMSE1,AMSE2,splits)
{
#The programs add a new knot by adding its endpoints to LE and RE and revising AMSE, AMSE1, and AMSE2
#The optimal potential splits are now given in 'splits' togeter with 'AMSE1' and 'AMSE2'
K=length(AMSE) #The common size of all vectors it will increase by one at the end of the function
#Next, one of the splits (optimal) becomes a new knot (and thus one endpoint is added to LE and RE each).
nLE=LE  #new endpoints they will increase by one in the next part
nRE=RE  #of the code
NAMSE=AMSE #New AMSE corresponding to 'nknots'
#Compute the drops in the average mean square errors, order them, and get ranks.
DAMSE=AMSE-(splits-LE)/(RE-LE)*AMSE1-(RE-splits)/(RE-LE)*AMSE2
#print('printing the drop mean square error for all potential knots')
#print(DAMSE)
if(all(is.na(DAMSE))){
warning('we found k knot and there are no more possibility to reduce. decrease M or L to find more knots')
quit()
}
else{
pos=which.max(DAMSE) #Location of the optimal split (also left hand side endpoint of the corresponding knot-interval)
nk=splits[pos] #The split leading to the largest gain, this becomes a new knot.
nLE=append(nLE,nk,after=pos) #Now we have K+1 knots, so one more left hand side endpoint
nRE=append(nRE,nk,after=(pos-1)) # and one more right hand side endpoint
#After getting a new knot we need change also AMSE
NAMSE[pos]=AMSE1[pos]
NAMSE=append(NAMSE,AMSE2[pos],after=pos) #Now we have K AMSE's
#Now it is time to update splits and AMSE1 and AMSE2
nsplits=splits #New splits corresponding to 'nknots' (to be revised below)
NAMSE1=AMSE1 #New AMSE1 corresponding to 'nknots' (to be revised below)
NAMSE2=AMSE2 #New AMSE1 corresponding to 'nknots' (to be revised below)
#Compute the optimal splits on the left and right intervals around the new knot
ff1=f[,(nLE[pos]+1):nRE[pos]]  #Part of the data below the new knot, the new knot is at LE[pos+1]=RE[pos]
newsp=opt_split(ff1,NAMSE[pos])
nsplits[pos]=nLE[pos]+newsp[[1]]       #Computing the split, AMSE1, and AMSE2 for the split below the new knot
NAMSE1[pos]=newsp[[2]]
NAMSE2[pos]=newsp[[3]]
ff2=f[,(nLE[pos+1]+1):nRE[pos+1]] #Computing the split, AMSE1, and AMSE2 for the split above the new knot
newsp=opt_split(ff2,NAMSE[pos+1])
nsplits=append(nsplits,nLE[pos+1]+newsp[[1]],after=pos) #Computing the split, AMSE1, and AMSE2 for the split above the new knot
NAMSE1=append(NAMSE1,newsp[[2]],after=pos)
NAMSE2=append(NAMSE2,newsp[[3]],after=pos)
opt_knots=list(NLE=nLE,NRE=nRE,nsplits=nsplits,NAMSE=NAMSE,NAMSE1=NAMSE1,NAMSE2=NAMSE2,locsp=pos)
}
return(opt_knots)
}
#############
add_knots=function(f,knots,L,M=5)
{
#Sum of squares function to make the code below more compact
ss=function(x)
{
sum((x-mean(x))^2)
}
nx=dim(f)[2] #The number of points in the grid
#Evaluating AMSE for the input knots.
K=length(knots)
AMSE=vector('numeric',K-1) #Here the values of the average mean squared errors will be kept
APPRERR=vector('numeric',L+1) #Here will be kept the sequence of improved approximation errors
#(in the terms of the average squared L2 norm: ||f1 - hat f1||_2^2+...+||fn - hat fn||_2^2)
#by piecewise constant functions resulting from adding the knots
LE=knots[1:(K-1)] #The open ended left ends of the intervals (so add one to have the closed end)
RE=knots[2:K]     #The close ended right ends of the intervals
splits=vector('numeric',K-1) #The new interval-wise optimal split-points
AMSE1=splits #The left-hand side (with respect to corresponding 'splits') values of the average mean square error
AMSE2=splits #The right-hand side (with respect to corresponding 'splits') values of the average mean square error
#First run through all the intervals is to compute all interval-wise split and corresponding 'AMSE1' and 'AMSE2'
for(k in 1:(K-1)) #the loop running through all the intervals at the current knots values
{
ff=f[,(knots[k]+1):(knots[k+1])]
AMSE[k]=mean(apply(ff,1,ss)/(knots[k+1]-knots[k])) #Here we keep the average mean squared errors for the input knots
newsp=opt_split(ff,AMSE[k]) #Finding optimal split with the given interval
splits[k]=knots[k]+newsp[[1]]
AMSE1[k]=newsp[[2]]
AMSE2[k]=newsp[[3]]
}
#The average approximation error of the functions for the input set of knots.
APPRERR[1]=sum((RE-LE)*AMSE)/nx  #Adding 1 is because the between knots interval is LE[i],RE[i]
#so that the number of points in this interval is
#computed splits (potential new knots) and corresponding AMSE1's and AMSE2's
#The full set knots, while updated in the loop below are kept in
FLE=LE #The initial values of the left endpoints
FRE=RE #The initial values of the right endpoints
FAMS=AMSE
Fspl=splits    #The splits and corresponding AMS1 and AMS2
FAMS1=AMSE1
FAMS2=AMSE2
for(i in 1:L){
#START of the loop
#Identify the intervals with fewer than M knots
inc=(FRE-FLE>=M) #indexes for the intervals to be kept for computations
#Checking if finding knots can be continued due to the constraint on the number M
#of points per in between knots intervals
if(sum(inc)<1){stop("too many knots requested, reduce value of L or of M")}
locinc=1:length(FRE)
locinc=locinc[inc==1] #indices of the intervals used for the computations
LL=FLE[inc]
RR=FRE[inc]
TAMS=FAMS[inc]             #Selected intervals for computations
TAMS1=FAMS1[inc]
TAMS2=FAMS2[inc]
sspl=Fspl[inc]
opt2=add_split(f,LL,RR,TAMS,TAMS1,TAMS2,sspl)
l=opt2$locsp #location of the new knot in the intervals used for the computation, i.e. the knot is
#in (L[l]+1):R[l] so that the new intervals are (L[l]+1):NR[l], (NL[l+1]+1):R[l]
#where NR[l]=NL[l+1] is the new split (knot)
NL=opt2$NLE
NR=opt2$NRE
AMS=opt2$NAMSE
APPRERR[1+i]=sum((NR-NL)*AMS)/nx #The new average sum of the squared norms of errors.
AMS1=opt2$NAMSE1
AMS2=opt2$NAMSE2
spl=opt2$nsplits
#Updating the complete set of knots by the knew knot.
print("printing the new knot")
print(NL[l+1])
FLE=append(FLE,NL[l+1],after=locinc[l])
FRE=append(FRE,NR[l],after=locinc[l]-1)
#Updating the average MSE
FAMS[locinc[l]]=AMS[l]
FAMS=append(FAMS,AMS[l+1],after=locinc[l])
#Updating the optimal splits
Fspl[locinc[l]]=spl[l]
Fspl=append(Fspl,spl[l+1],after=locinc[l])
#And the corresponding left and right average MSE
FAMS1[locinc[l]]=AMS1[l]
FAMS1=append(FAMS1,AMS1[l+1],after=locinc[l])
FAMS2[locinc[l]]=AMS2[l]
FAMS2=append(FAMS2,AMS2[l+1],after=locinc[l])
#END of the loop.
}
Fknots=c(FLE,FRE[length(FRE)])
add_knots=list(Fknots=Fknots,FAMSE=FAMS,APPRERR=APPRERR)
return(add_knots)
}
NKN_1=add_knots(f,knots1,N-1,M)
N=2#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
knots1=c(0,nx)
AMSE=mean(apply(f,1,ss)/dim(f)[2])
M=10
NKN_1=add_knots(f,knots1,N-1,M)
NKN_1$Fknots
dim(f)
nx= dim(f)[2]
N=2#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
knots1=c(0,nx)
AMSE=mean(apply(f,1,ss)/dim(f)[2])
M=10
NKN_1=add_knots(f,knots1,N-1,M)
NKN_1$Fknots
N=10#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
knots1=c(0,nx)
AMSE=mean(apply(f,1,ss)/dim(f)[2])
M=10
NKN_1=add_knots(f,knots1,N-1,M)
NKN_1$Fknots
N=14#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
M=10
NKN_1=add_knots(f,knots1,N-1,M)
NKN_1$Fknots
N=25#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
knots1=c(0,nx)
AMSE=mean(apply(f,1,ss)/dim(f)[2])
M=10
NKN_1=add_knots(f,knots1,N-1,M)
NKN_1$Fknots
N=30#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
NKN_1=add_knots(f,knots1,N-1,M)
NKN_1$Fknots
N=30#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
knots1=c(0,nx)
AMSE=mean(apply(f,1,ss)/dim(f)[2])
M=10
NKN_1=add_knots(f,knots1,N-1,M)
add_split=function(f,LE,RE,AMSE,AMSE1,AMSE2,splits)
{
#The programs add a new knot by adding its endpoints to LE and RE and revising AMSE, AMSE1, and AMSE2
#The optimal potential splits are now given in 'splits' togeter with 'AMSE1' and 'AMSE2'
K=length(AMSE) #The common size of all vectors it will increase by one at the end of the function
#Next, one of the splits (optimal) becomes a new knot (and thus one endpoint is added to LE and RE each).
nLE=LE  #new endpoints they will increase by one in the next part
nRE=RE  #of the code
NAMSE=AMSE #New AMSE corresponding to 'nknots'
#Compute the drops in the average mean square errors, order them, and get ranks.
DAMSE=AMSE-(splits-LE)/(RE-LE)*AMSE1-(RE-splits)/(RE-LE)*AMSE2
#print('printing the drop mean square error for all potential knots')
#print(DAMSE)
if(all(is.na(DAMSE))){
warning('we found k knot and there are no more possibility to reduce. decrease M or L to find more knots')
#quit()
stopQuietly()
}
else{
pos=which.max(DAMSE) #Location of the optimal split (also left hand side endpoint of the corresponding knot-interval)
nk=splits[pos] #The split leading to the largest gain, this becomes a new knot.
nLE=append(nLE,nk,after=pos) #Now we have K+1 knots, so one more left hand side endpoint
nRE=append(nRE,nk,after=(pos-1)) # and one more right hand side endpoint
#After getting a new knot we need change also AMSE
NAMSE[pos]=AMSE1[pos]
NAMSE=append(NAMSE,AMSE2[pos],after=pos) #Now we have K AMSE's
#Now it is time to update splits and AMSE1 and AMSE2
nsplits=splits #New splits corresponding to 'nknots' (to be revised below)
NAMSE1=AMSE1 #New AMSE1 corresponding to 'nknots' (to be revised below)
NAMSE2=AMSE2 #New AMSE1 corresponding to 'nknots' (to be revised below)
#Compute the optimal splits on the left and right intervals around the new knot
ff1=f[,(nLE[pos]+1):nRE[pos]]  #Part of the data below the new knot, the new knot is at LE[pos+1]=RE[pos]
newsp=opt_split(ff1,NAMSE[pos])
nsplits[pos]=nLE[pos]+newsp[[1]]       #Computing the split, AMSE1, and AMSE2 for the split below the new knot
NAMSE1[pos]=newsp[[2]]
NAMSE2[pos]=newsp[[3]]
ff2=f[,(nLE[pos+1]+1):nRE[pos+1]] #Computing the split, AMSE1, and AMSE2 for the split above the new knot
newsp=opt_split(ff2,NAMSE[pos+1])
nsplits=append(nsplits,nLE[pos+1]+newsp[[1]],after=pos) #Computing the split, AMSE1, and AMSE2 for the split above the new knot
NAMSE1=append(NAMSE1,newsp[[2]],after=pos)
NAMSE2=append(NAMSE2,newsp[[3]],after=pos)
opt_knots=list(NLE=nLE,NRE=nRE,nsplits=nsplits,NAMSE=NAMSE,NAMSE1=NAMSE1,NAMSE2=NAMSE2,locsp=pos)
}
return(opt_knots)
}
N=30#The size of the basis for zero orde, and the size of the cubic splinet will be N-3
NKN_1=add_knots(f,knots1,N-1,M)
stopQuietly <- function(...) {
blankMsg <- sprintf("\r%s\r", paste(rep(" ", getOption("width")-1L), collapse=" "));
stop(simpleError(blankMsg));
} # stopQuietly()
NKN_1=add_knots(f,knots1,N-1,M)
stop_quietly <- function() {
opt <- options(show.error.messages = FALSE)
on.exit(options(opt))
stop()
}
NKN_1=add_knots(f,knots1,N-1,M)
add_split=function(f,LE,RE,AMSE,AMSE1,AMSE2,splits)
{
#The programs add a new knot by adding its endpoints to LE and RE and revising AMSE, AMSE1, and AMSE2
#The optimal potential splits are now given in 'splits' togeter with 'AMSE1' and 'AMSE2'
K=length(AMSE) #The common size of all vectors it will increase by one at the end of the function
#Next, one of the splits (optimal) becomes a new knot (and thus one endpoint is added to LE and RE each).
nLE=LE  #new endpoints they will increase by one in the next part
nRE=RE  #of the code
NAMSE=AMSE #New AMSE corresponding to 'nknots'
#Compute the drops in the average mean square errors, order them, and get ranks.
DAMSE=AMSE-(splits-LE)/(RE-LE)*AMSE1-(RE-splits)/(RE-LE)*AMSE2
#print('printing the drop mean square error for all potential knots')
#print(DAMSE)
if(all(is.na(DAMSE))){
warning('we found k knot and there are no more possibility to reduce. decrease M or L to find more knots')
#quit()
#stopQuietly()
q(save="no", status=1, runLast=FALSE)
}
else{
pos=which.max(DAMSE) #Location of the optimal split (also left hand side endpoint of the corresponding knot-interval)
nk=splits[pos] #The split leading to the largest gain, this becomes a new knot.
nLE=append(nLE,nk,after=pos) #Now we have K+1 knots, so one more left hand side endpoint
nRE=append(nRE,nk,after=(pos-1)) # and one more right hand side endpoint
#After getting a new knot we need change also AMSE
NAMSE[pos]=AMSE1[pos]
NAMSE=append(NAMSE,AMSE2[pos],after=pos) #Now we have K AMSE's
#Now it is time to update splits and AMSE1 and AMSE2
nsplits=splits #New splits corresponding to 'nknots' (to be revised below)
NAMSE1=AMSE1 #New AMSE1 corresponding to 'nknots' (to be revised below)
NAMSE2=AMSE2 #New AMSE1 corresponding to 'nknots' (to be revised below)
#Compute the optimal splits on the left and right intervals around the new knot
ff1=f[,(nLE[pos]+1):nRE[pos]]  #Part of the data below the new knot, the new knot is at LE[pos+1]=RE[pos]
newsp=opt_split(ff1,NAMSE[pos])
nsplits[pos]=nLE[pos]+newsp[[1]]       #Computing the split, AMSE1, and AMSE2 for the split below the new knot
NAMSE1[pos]=newsp[[2]]
NAMSE2[pos]=newsp[[3]]
ff2=f[,(nLE[pos+1]+1):nRE[pos+1]] #Computing the split, AMSE1, and AMSE2 for the split above the new knot
newsp=opt_split(ff2,NAMSE[pos+1])
nsplits=append(nsplits,nLE[pos+1]+newsp[[1]],after=pos) #Computing the split, AMSE1, and AMSE2 for the split above the new knot
NAMSE1=append(NAMSE1,newsp[[2]],after=pos)
NAMSE2=append(NAMSE2,newsp[[3]],after=pos)
opt_knots=list(NLE=nLE,NRE=nRE,nsplits=nsplits,NAMSE=NAMSE,NAMSE1=NAMSE1,NAMSE2=NAMSE2,locsp=pos)
}
return(opt_knots)
}
NKN_1=add_knots(f,knots1,N-1,M)
